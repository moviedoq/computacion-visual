// üß© Importaci√≥n de React y hooks necesarios
import React, { useRef, useState, Suspense } from "react";

// üé® Importaci√≥n del motor de renderizado de Three.js para React
import { Canvas, useLoader } from "@react-three/fiber";

// üß∞ Utilidades de Drei (extensiones para Three.js en React)
import { OrbitControls, Edges, useGLTF } from "@react-three/drei";

// üîß Importaci√≥n de constantes y utilidades desde Three.js
import * as THREE from "three";

// üì¶ Componente que carga y muestra el modelo 3D
function ModelViewer({ viewMode }) {
  const group = useRef(); // Referencia al grupo que contiene el modelo

  // üß≤ Cargar el archivo GLB (debe estar en la carpeta /public)
  const { scene } = useGLTF("/modelo.glb");

  // üîç Buscar la primera malla con geometr√≠a en el modelo
  let mesh = null;
  scene.traverse((child) => {
    if (child.isMesh && !mesh) {
      mesh = child;
    }
  });

  // ‚ö†Ô∏è Si no se encuentra geometr√≠a, se interrumpe el renderizado
  if (!mesh) {
    console.warn("‚ö†Ô∏è No se encontr√≥ geometr√≠a en el modelo.");
    return null;
  }

  // üé® Visualizaci√≥n condicional seg√∫n el modo actual: caras, aristas o puntos
  return (
    <group ref={group} scale={1.5}>
      {/* Vista: Caras del modelo (s√≥lido) */}
      {viewMode === "faces" && (
        <mesh geometry={mesh.geometry}>
          <meshStandardMaterial color="white" side={THREE.DoubleSide} />
        </mesh>
      )}

      {/* Vista: Aristas con wireframe y bordes destacados */}
      {viewMode === "edges" && (
        <mesh geometry={mesh.geometry}>
          <meshStandardMaterial color="white" wireframe />
          <Edges />
        </mesh>
      )}

      {/* Vista: V√©rtices del modelo como puntos rojos */}
      {viewMode === "points" && (
        <points geometry={mesh.geometry}>
          <pointsMaterial size={0.02} color="red" />
        </points>
      )}
    </group>
  );
}

// üöÄ Componente principal que define la escena 3D y la interfaz
export default function App() {
  const [viewMode, setViewMode] = useState("faces"); // Estado para cambiar vista: 'faces', 'edges', 'points'

  return (
    <div style={{ width: "100vw", height: "100vh" }}>
      {/* üé¨ Escena principal de Three.js */}
      <Canvas camera={{ position: [2, 2, 4] }}>
        <ambientLight intensity={0.6} /> {/* Luz ambiental suave */}
        <directionalLight position={[5, 5, 5]} /> {/* Luz direccional */}
        <OrbitControls /> {/* Control de c√°mara con el mouse */}
        <Suspense fallback={null}>
          {" "}
          {/* Esperar a que cargue el modelo */}
          <ModelViewer viewMode={viewMode} />
        </Suspense>
      </Canvas>

      {/* üñ±Ô∏è Interfaz flotante para seleccionar modo de visualizaci√≥n */}
      <div
        style={{
          position: "absolute",
          top: 10,
          left: 10,
          background: "white",
          padding: "10px",
          borderRadius: "8px",
          boxShadow: "0 0 5px rgba(0,0,0,0.2)",
        }}
      >
        <strong>Visualizaci√≥n:</strong>
        <br />
        <button onClick={() => setViewMode("faces")}>Caras</button>
        <button onClick={() => setViewMode("edges")}>Aristas</button>
        <button onClick={() => setViewMode("points")}>V√©rtices</button>
      </div>
    </div>
  );
}
